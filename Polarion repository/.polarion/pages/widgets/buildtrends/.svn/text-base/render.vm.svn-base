###############################################################################
##
##		render.vm - this velocity script is executed to render the actual widget
##

###############################################################################
##
## Velocity Context - following objects are in the velocity context
##
## com.polarion.alm.shared.api.model.rp.parameter.RichPageParameters $parameters
## com.polarion.alm.shared.api.model.rp.parameter.impl.object.ObjectSelectorParameterImpl $projectParam
## com.polarion.alm.shared.api.transaction.ReadOnlyTransaction $transaction
## com.polarion.alm.shared.api.model.rp.widget.RichPageWidgetRenderingContext $widgetContext
## com.polarion.alm.shared.api.model.rp.RichPage $page
##

###############################################################################
##
## Parameters
##
#set($projectParam = $parameters.project)
#set($months = $parameters.months.value())
#if(!$months)
	#set($months = 12)
#end
#set($displayNumber = $parameters.displayNumber.value())
#set($displayPercentage = $parameters.displayPercentage.value())
#set($colorPassed = $parameters.colors.colorPassed.value())
#set($colorFailed = $parameters.colors.colorFailed.value())

#set($projectId = $projectParam.value().getReference().projectId())
#if(!$projectId)
	#set($projectId = $page.getReference().projectId())
#end
#set($projectName = $transaction.projects().getBy().id("$projectId").fields().name().getIfCan())

#set($baseQ = "buildArtifact.groupEntity.id:/default/$projectId")
#set($dataService = $trackerService.getDataService())

#set($divID = $widgetContext.generateUniqueElementId())
#set($divIdForRatio = $widgetContext.generateUniqueElementId())

###############################################################################
##
## Macros
##
#macro(shiftMonths $m)
	#set($cal = $date.getCalendar())
	#set($void = $cal.add(2, $math.sub($m, $math.mul($m, 2))))
	#set($void = $cal.set(5, 1))
#end

#macro(defineQueryMonth)
	#set($dateNow = $date.format('yyyyMMdd', $cal))
	#set($void = $cal.add(2, $math.sub(1, 2))) ## remove one month to get the correct month for the x axis
	#set($dateUTC = $date.format('yyyy, MM, dd', $cal))
	#set($void = $cal.add(2, 2)) ## add the month again
	#set($void = $cal.add(7, $math.sub(1, 2))) ## remove one day to get the end of the target month
	#set($datePlusOne = $date.format('yyyyMMdd', $cal))
	#set($void = $cal.add(7, 1)) ## add the day again
	#set($queryPassed = "$baseQ AND finishTime:[$dateNow TO $datePlusOne] AND buildStatus.type:(OK OK_WITH_FAILURES)")
	#set($queryFailed = "$baseQ AND finishTime:[$dateNow TO $datePlusOne] AND NOT buildStatus.type:(OK OK_WITH_FAILURES)")
#end

###############################################################################
##
## Render
##
#shiftMonths($months)
#defineQueryMonth()
#set($dataFailed = "[Date.UTC($dateUTC), $dataService.getInstancesCount('Build', $queryFailed)]")
#set($dataPassed = "[Date.UTC($dateUTC), $dataService.getInstancesCount('Build', $queryPassed)]")
#foreach($i in [1..$months]) 
	#defineQueryMonth()
	#set($dataFailed = "$dataFailed, [Date.UTC($dateUTC), $dataService.getInstancesCount('Build', $queryFailed)]")
	#set($dataPassed = "$dataPassed, [Date.UTC($dateUTC), $dataService.getInstancesCount('Build', $queryPassed)]")
#end

#if($displayNumber)
	<div id="$divID" style="min-width: 300px; height: 400px; margin: 0 auto"></div>
#end
#if($displayPercentage)
	<div id="$divIdForRatio" style="min-width: 300px; height: 400px; margin: 0 auto"></div>
#end

###############################################################################
##
## Scripts
##
<script type="text/javascript">
	new Highcharts.Chart({
		chart: {
			type: 'area',
			renderTo: '$divID',
			zoomType: 'x'
		},
		title: {
			text: '# Passed vs. Failed Builds per Month'
		},
		exporting: {
			enabled: false
		},
		credits: {
			enabled: false
		},
		xAxis: { 
			title: {
				text: 'Months'
			},
			maxPadding: 0, 
			type: 'datetime', 
		}, 
		yAxis: {
			title: {
				text: 'Builds'
			},
			gridLineWidth: 0, 
			min: 0,
			minTickInterval: 1
		},
		tooltip: {
			shared: true,
			formatter: function() {
				var date = Highcharts.dateFormat('%b %Y', new Date(this.x));
				var totalNum = this.points[0].y + this.points[1].y;
				var total = 'Total: ' + totalNum;
				var passed = '<span style="color: ' + this.points[0].series.color + '">' + this.points[0].series.name + '</span>: '+ this.points[0].y;
				var failed = '<span style="color: ' + this.points[1].series.color + '">' + this.points[1].series.name + '</span>: '+ this.points[1].y;
				return '<b>' + date + '</b><br/>' + total + '<br/>' + passed + '<br/>' + failed;
			}
		},
		plotOptions: {
			area: {
				marker: {
					enabled: false,
					symbol: 'circle',
					radius: 2,
					states: {
						hover: {
							enabled: true
						}
					}
				}
			}
		},
		series: [{
			color: '$colorPassed',
			name: 'Passed',
			data: [$dataPassed]
		}, {
			color: '$colorFailed',
			name: 'Failed',
			data: [$dataFailed]
		}]
	});
</script>

<script type="text/javascript">
	new Highcharts.Chart({
		chart: {
			type: 'area',
			renderTo: '$divIdForRatio',
			zoomType: 'x'
		},
		title: {
			text: '% Passed vs. Failed Builds per Month'
		},
		exporting: {
			enabled: false
		},
		credits: {
			enabled: false
		},
		xAxis: { 
			title: {
				text: 'Months'
			},
			maxPadding: 0, 
			type: 'datetime', 
		}, 
		yAxis: {
			title: {
				text: '%'
			},
			gridLineWidth: 0, 
			min: 0,
			minTickInterval: 1
		},
		tooltip: {
			shared: true,
			formatter: function() {
				var date = Highcharts.dateFormat('%b %Y', new Date(this.x));
				var totalNum = this.points[0].y + this.points[1].y;
				var total = 'Total: ' + totalNum;
				var passed = '<span style="color: ' + this.points[0].series.color + '">' + this.points[0].series.name + '</span>: '+ this.points[0].percentage.toFixed(1) + '%';
				var failed = '<span style="color: ' + this.points[1].series.color + '">' + this.points[1].series.name + '</span>: '+ this.points[1].percentage.toFixed(1) + '%';
				return '<b>' + date + '</b><br/>' + total + '<br/>' + passed + '<br/>' + failed;
			}
		},
		plotOptions: {
			area: {
				stacking:'percent',
				marker: {
					enabled: false,
					symbol: 'circle',
					radius: 2,
					states: {
						hover: {
							enabled: true
						}
					}
				}
			}
		},
		series: [{
			color: '$colorPassed',
			name: 'Passed',
			data: [$dataPassed]
		}, {
			color: '$colorFailed',
			name: 'Failed',
			data: [$dataFailed]
		}]
	});
</script>

